# -*- mode: ruby -*-
# vi: set ft=ruby :

vagrant_root = File.dirname(__FILE__)
disk = "#{vagrant_root}/vm-rg3-db.vdi"

Vagrant.configure(2) do |config|

  config.vm.box = "boxcutter/fedora24"
  config.vm.hostname = "vm-rg3"
  config.vm.box_check_update = false
  config.vm.network :private_network, ip: "192.168.56.131"

  config.vm.synced_folder vagrant_root,                "/vagrant/",        disabled: true
  config.vm.synced_folder "#{vagrant_root}/logs",      "/vagrant/logs",    create: true
  config.vm.synced_folder "#{vagrant_root}/fdt",       "/vagrant/fdt",     create: true
  config.vm.synced_folder "#{vagrant_root}/pmt",       "/vagrant/pmt",     create: true
  config.vm.synced_folder "#{vagrant_root}/ipspecs",   "/vagrant/ipspecs", create: true
  config.vm.synced_folder "#{vagrant_root}/vme",       "/vagrant/vme",     create: true
  config.vm.synced_folder "#{vagrant_root}/shared",    "/vagrant/shared",  create: true
  config.vm.synced_folder "#{vagrant_root}/xdebug",    "/vagrant/xdebug",  create: true
  
  config.vm.provider "virtualbox" do |vb|

        vb.memory = "2048"
        vb.cpus = 2
        vb.name = "vm-rg3"
        
        unless File.exists?(disk)
            vb.customize ['createhd', '--filename', disk, '--variant', 'Standard', '--size', 60*1024]
        end
        
        vb.customize ['storageattach', :id,  '--storagectl', 'IDE Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', disk]
    
  end

  
  
  
  
#=begin
  config.vm.provision "shell", inline: <<-SHELL
mkdir -p /mnt/vagrant_data
mkdir -p /mnt/vagrant_data/fdt/images
mkdir -p /mnt/vagrant_data/fdt/pics
chown -R vagrant.vagrant /mnt/vagrant_data
echo "cd /vagrant/" >> /home/vagrant/.bash_profile
mkdir -p /home2
chown vagrant.vagrant /home2
mkdir -p /home2/storage.secondary
chown vagrant.vagrant /home2/storage.secondary

SHELL
#=end









#=begin general system config and setup
  config.vm.provision "shell", inline: <<-SHELL
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "setup timezone and boot loader"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"

echo "127.0.0.1 localhost" >> /etc/hosts
timedatectl set-timezone Europe/Minsk
cat > /etc/rc.d/rc.local <<EOL
#!/bin/bash

EOL
chmod a+x /etc/rc.d/rc.local
systemctl enable rc-local.service
mkdir -p /vagrant/logs
chmod a+rw /vagrant/logs/
mkdir -p /vagrant/shared/php_include/
sed -c -i "s/\\(GRUB_TIMEOUT *= *\\).*/\\11/" /etc/default/grub
sed -c -i "s/rhgb//" /etc/default/grub
sed -c -i "s/quiet//" /etc/default/grub
grub2-mkconfig -o /etc/grub2.cfg
SHELL
#=end
  






#=begin attach secondary storage
  config.vm.provision "shell", inline: <<-SHELL
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "setup secondary disk"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"

parted /dev/sdb mklabel msdos
parted /dev/sdb mkpart primary 512 100%
mkfs.xfs /dev/sdb1
mkdir -p /mnt/disk
echo `blkid /dev/sdb1 | awk '{print$2}' | sed -e 's/"//g'` /mnt/disk xfs noatime,nobarrier 0 0 >> /etc/fstab
mount /mnt/disk
SHELL
#=end






#=begin install packages
  config.vm.provision "shell", inline: <<-SHELL
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "install packagaes (dnf) this will take a while"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"

/bin/dnf update -y dnf*
/bin/dnf install -y nano mc nc htop psmisc telnet bind-utils elinks
/bin/dnf install -y nginx
/bin/dnf install -y memcached
/bin/dnf install -y tor torsocks
/bin/dnf install -y words
/bin/dnf install -y ImageMagick rrdtool
/bin/dnf install -y rabbitmq-server
/bin/dnf install -y ruby ruby-devel rubygems redhat-rpm-config bind-libs sqlite-devel

rabbitmq-plugins enable rabbitmq_management

SHELL
#=end







#=begin install PHP dependencies
  config.vm.provision "shell", inline: <<-SHELL
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "install PHP dependencies (dnf)"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"

/bin/dnf install -y git gcc gcc-c++ libxml2-devel pkgconfig openssl-devel bzip2-devel curl-devel
/bin/dnf install -y libpng-devel libjpeg-devel libXpm-devel freetype-devel gmp-devel libmcrypt-devel
/bin/dnf install -y aspell-devel recode-devel autoconf bison re2c libicu-devel readline-devel libtidy-devel
/bin/dnf install -y libmemcached-devel librabbitmq-devel

SHELL
#=end





#=begin
  config.vm.provision "shell", inline: <<-SHELL
systemctl disable nginx.service
systemctl enable rabbitmq-server.service
systemctl enable tor.service
systemctl enable memcached.service
SHELL
#=end








#=begin nginx
  config.vm.provision "shell", inline: <<-SHELL
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "setup nginx and hosts"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"



sed -c -i "s/sendfile.*/sendfile off;/" /etc/nginx/nginx.conf




mkdir -p /vagrant/logs/nginx

cat  > /etc/nginx/conf.d/fdt.conf  <<EOL

server {
    server_name fdt www.fdt;
    access_log /vagrant/logs/nginx/fdt_access.log;
    error_log /vagrant/logs/nginx/fdt_error.log;
    root /vagrant/fdt/code/www;

    location / {
        index  index.html index.php;
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

EOL

cat  > /etc/nginx/conf.d/ipspecs.conf  <<EOL

server {
    server_name ipspecs www.ipspecs;
    access_log /vagrant/logs/nginx/ipspecs_www_access.log;
    error_log /vagrant/logs/nginx/ipspecs_www_error.log;
    root /vagrant/ipspecs/code/docroot_website;

    location / {
        index  index.html index.php;
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

server {
    server_name acp.ipspecs;
    access_log /vagrant/logs/nginx/ipspecs_acp_access.log;
    error_log /vagrant/logs/nginx/ipspecs_acp_error.log;
    root /vagrant/ipspecs/code/docroot_acp;

    location / {
        index  index.html index.php;
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

server {
    server_name api.ipspecs;
    access_log /vagrant/logs/nginx/ipspecs_api_access.log;
    error_log /vagrant/logs/nginx/ipspecs_api_error.log;
    root /vagrant/ipspecs/code/docroot_api;

    location / {
        index  index.html index.php;
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

EOL

cat  > /etc/nginx/conf.d/vme.conf  <<EOL

server {
    server_name vme www.vme;
    access_log /vagrant/logs/nginx/vme_www_access.log;
    error_log /vagrant/logs/nginx/vme_www_error.log;
    root /vagrant/vme/code/docroot_website;

    location / {
        index  index.html index.php;
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

server {
    server_name acp.vme;
    access_log /vagrant/logs/nginx/vme_acp_access.log;
    error_log /vagrant/logs/nginx/vme_acp_error.log;
    root /vagrant/vme/code/docroot_acp;

    location / {
        index  index.html index.php;
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

server {
    server_name api.vme;
    access_log /vagrant/logs/nginx/vme_api_access.log;
    error_log /vagrant/logs/nginx/vme_api_error.log;
    root /vagrant/vme/code/docroot_api;

    location / {
        index  index.html index.php;
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

EOL

cat  > /etc/nginx/conf.d/acprg.conf  <<EOL

server {
    server_name acp.rg;
    access_log /vagrant/logs/nginx/acprg_access.log;
    error_log /vagrant/logs/nginx/acprg_error.log;
    root /vagrant/fdt/code/docroot_acp;

    location / {
        index  index.html index.php;
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

server {
    server_name acps.rg;
    access_log /vagrant/logs/nginx/acpsrg_access.log;
    error_log /vagrant/logs/nginx/acpsrg_error.log;
    root /vagrant/fdt/code/docroot_acps;

    location / {
        index  index.html index.php;
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

EOL

cat  > /etc/nginx/conf.d/wwwrg.conf  <<EOL

server {
    server_name www.rg;
    access_log /vagrant/logs/nginx/wwwrg_access.log;
    error_log /vagrant/logs/nginx/wwwrg_error.log;
    root /vagrant/fdt/code/docroot_www;

    location / {
        index  index.html index.php;
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

EOL

cat  > /etc/nginx/conf.d/apirg.conf  <<EOL

server {
    server_name api.rg;
    access_log /vagrant/logs/nginx/apirg_access.log;
    error_log /vagrant/logs/nginx/apirg_error.log;
    root /vagrant/fdt/code/docroot_api;

    location /api/101/ {
        rewrite ^/api/101/([^/]+)/([^/]+)/$ /api/101/api.php?version=101&action=\\$1&key=\\$2 break;
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
    
    location / {
    
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

EOL




cat  > /etc/nginx/conf.d/apipmt.conf  <<EOL

server {
    server_name api.pmt;
    access_log /vagrant/logs/nginx/apipmt_access.log;
    error_log /vagrant/logs/nginx/apipmt_error.log;
    root /vagrant/pmt/code/docroot_api;
    
    location / {
    
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

EOL

cat  > /etc/nginx/conf.d/wwwpmt.conf  <<EOL

server {
    server_name www.pmt;
    access_log /vagrant/logs/nginx/wwwpmt_access.log;
    error_log /vagrant/logs/nginx/wwwpmt_error.log;
    root /vagrant/pmt/code/docroot_www;

    location / {
        index  index.html index.php;
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

EOL

cat  > /etc/nginx/conf.d/acppmt.conf  <<EOL

server {
    server_name acp.pmt;
    access_log /vagrant/logs/nginx/acppmt_access.log;
    error_log /vagrant/logs/nginx/acppmt_error.log;
    root /vagrant/pmt/code/docroot_acp;

    location / {
        index  index.html index.php;
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

server {
    server_name acps.pmt;
    access_log /vagrant/logs/nginx/acpspmt_access.log;
    error_log /vagrant/logs/nginx/acpspmt_error.log;
    root /vagrant/pmt/code/docroot_acps;

    location / {
        index  index.html index.php;
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
    
    location ~ .(ttf|ttc|otf|eot|woff|woff2|font.css|css|js)$ {                                                                                                                                                                                                           
      add_header Access-Control-Allow-Origin "*";                                                                                                                                                                                                                           
    } 
}

EOL



SHELL
#=end






#=begin PHP install/compile
  config.vm.provision "shell", inline: <<-SHELL
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "setup PHP7"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"

mkdir -p /usr/src/
cd /usr/src/
wget -nv http://php.net/distributions/php-7.1.0.tar.bz2 -O php-7.1.0.tar.bz2
tar -xjf php-7.1.0.tar.bz2
cd php-7.1.0
./configure --prefix=/usr/local/php-7.1.0 --enable-fpm --enable-opcache --enable-intl --enable-sockets --enable-pcntl --enable-gd-native-ttf --with-libdir=lib64 --enable-ftp --enable-mbstring --enable-exif --with-openssl --with-pspell --with-jpeg-dir=/usr --with-png-dir=/usr --with-freetype-dir=/usr --with-gd --enable-gd-native-ttf --enable-inline-optimization --with-curl --with-kerberos --with-gettext --with-readline --with-zlib --with-zlib-dir=/usr --with-bz2 --with-mcrypt --with-tidy --enable-zip --enable-pcntl --enable-soap --enable-calendar --enable-sockets
make -j2
make install

cp /usr/local/php-7.1.0/etc/php-fpm.conf.default /usr/local/php-7.1.0/etc/php-fpm.conf
cp /usr/src/php-7.1.0/php.ini-development /usr/local/php-7.1.0/lib/php.ini

ln -s /usr/local/php-7.1.0 /usr/local/php
ln -s /usr/local/php/bin/php /usr/bin/php 
ln -s /usr/local/php/bin/phpize /usr/bin/phpize
ln -s /usr/local/php/bin/pecl /usr/bin/pecl
ln -s /usr/local/php/bin/php-config /usr/bin/php-config
ln -s /usr/local/php-7.1.0/sbin/php-fpm /usr/sbin/php-fpm
ln -s /usr/local/php-7.1.0/lib/php.ini /usr/local/lib/php.ini

cp /usr/local/php-7.1.0/etc/php-fpm.d/www.conf.default /usr/local/php-7.1.0/etc/php-fpm.d/vm-rg3.conf.default
cp /usr/local/php-7.1.0/etc/php-fpm.d/vm-rg3.conf.default /usr/local/php-7.1.0/etc/php-fpm.d/vm-rg3.conf

sed -c -i "s/\\(user *= *\\).*/\\1vagrant/" /usr/local/php/etc/php-fpm.d/vm-rg3.conf
sed -c -i "s/\\(group *= *\\).*/\\1vagrant/" /usr/local/php/etc/php-fpm.d/vm-rg3.conf


cat >> /usr/local/php-7.1.0/etc/php-fpm.conf <<EOL

[global]
error_log = /vagrant/logs/php-fpm-error.log

EOL

sed -c -i "s/\\(short_open_tag *= *\\).*/\\1On/" /usr/local/lib/php.ini
sed -c -i "s/\\(memory_limit *= *\\).*/\\1256M/" /usr/local/lib/php.ini
sed -c -i "s/\\(upload_max_filesize *= *\\).*/\\132M/" /usr/local/lib/php.ini
sed -c -i "s/\\(max_execution_time *= *\\).*/\\160/" /usr/local/lib/php.ini

cat >> /usr/local/lib/php.ini <<EOL
error_log = /vagrant/logs/php_error.log
EOL


SHELL
#=end



#=begin php memcached module
  config.vm.provision "shell", inline: <<-SHELL
cat >> /etc/rc.d/rc.local <<EOL
sleep 10;/usr/sbin/php-fpm
sleep 10;systemctl restart nginx.service
EOL

SHELL
#=end





















#=begin PHP tools and libs
  config.vm.provision "shell", inline: <<-SHELL
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "setup phpunit"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
  
cd /usr/src/
wget -nv https://phar.phpunit.de/phpunit.phar
chmod +x phpunit.phar
cp phpunit.phar /vagrant/shared/php_include/phpunit.phar
mv phpunit.phar /usr/local/bin/phpunit

echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "setup composer"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"

cd /usr/src/
php -r "readfile('https://getcomposer.org/installer');" > composer-setup.php
php composer-setup.php
php -r "unlink('composer-setup.php');"
cp composer.phar /vagrant/shared/php_include/composer.phar
mv composer.phar /usr/local/bin/composer

SHELL
#=end












#=begin php memcached module
  config.vm.provision "shell", inline: <<-SHELL
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "setup php-memcached"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"

cd /usr/src
git clone https://github.com/php-memcached-dev/php-memcached.git
cd php-memcached
git checkout php7
phpize
./configure --disable-memcached-sasl
make -j2
make install

cat >> /usr/local/lib/php.ini <<EOL

extension=memcached.so

EOL

SHELL
#=end










#=begin php modules: xdebug, amqp and mongodb modules
  config.vm.provision "shell", inline: <<-SHELL
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "setup php modules"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"

/usr/bin/pecl install xdebug
printf "\n" | /usr/bin/pecl install amqp-1.7.1
/usr/bin/pecl install mongodb-1.2.0
/usr/bin/pecl install mailparse

cat >> /usr/local/lib/php.ini <<EOL

zend_extension=xdebug.so
extension=amqp.so
extension=mongodb.so
extension=mailparse.so

[xdebug]
xdebug.remote_enable=1
xdebug.remote_host="192.168.56.1"
xdebug.remote_port=9000
xdebug.remote_idkey=XDEBUGIDKEY
xdebug.profiler_enable=Off
xdebug.profiler_trigger=On
xdebug.profiler_output_dir="/vagrant/xdebug"

[Date]
date.timezone = Europe/Minsk

EOL

SHELL
#=end









  
#=begin xdebug aliases
  config.vm.provision "shell", inline: <<-SHELL
cat >> /home/vagrant/.bash_profile <<EOL
alias xdebug-start='export XDEBUG_CONFIG="idekey=PHPSTORM"; export PHP_IDE_CONFIG="serverName=vm-rg3"'
alias xdebug-stop='unset XDEBUG_CONFIG; unset PHP_IDE_CONFIG'
EOL
SHELL
#=end







#=begin MongoDB server
  config.vm.provision "shell", inline: <<-SHELL
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "setup mongodb server"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"

cd /usr/src/
wget -nv http://downloads.mongodb.org/linux/mongodb-linux-x86_64-amazon-3.0.6.tgz -O mongodb-linux-x86_64-amazon-3.0.6.tgz
tar -xzf mongodb-linux-x86_64-amazon-3.0.6.tgz
cp -R mongodb-linux-x86_64-amazon-3.0.6/ /usr/local/mongodb

cat >> /etc/rc.d/rc.local <<EOL
sleep 20
/usr/local/mongodb/bin/mongod -f /etc/mongodb/standalone.conf
EOL

mkdir /etc/mongodb
cat > /etc/mongodb/standalone.conf <<EOL
dbpath = /mnt/disk/mongodb
storageEngine = wiredTiger
logpath = /mnt/disk/mongodb/mongo.log
fork = true
EOL

ln -s /usr/local/mongodb/bin/mongo /usr/local/bin/mongo
ln -s /usr/local/mongodb/bin/mongodump /usr/local/bin/mongodump
ln -s /usr/local/mongodb/bin/mongoexport /usr/local/bin/mongoexport
ln -s /usr/local/mongodb/bin/mongoimport /usr/local/bin/mongoimport
ln -s /usr/local/mongodb/bin/mongorestore /usr/local/bin/mongorestore

mkdir /mnt/disk/mongodb

/usr/local/mongodb/bin/mongod -f /etc/mongodb/standalone.conf

SHELL
#=end








#=begin PhpMyAdmin
  config.vm.provision "shell", inline: <<-SHELL
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "setup phpMyAdmin"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"

mkdir -p /var/www/phpmyadmin/

cd /usr/src/
wget -nv https://files.phpmyadmin.net/phpMyAdmin/4.5.3.1/phpMyAdmin-4.5.3.1-english.tar.bz2
tar -xjf phpMyAdmin-4.5.3.1-english.tar.bz2
cp -R phpMyAdmin-4.5.3.1-english /var/www/phpmyadmin

cd /var/www/phpmyadmin/

cat > /var/www/phpmyadmin/config.inc.php <<EOL
<?php
\\$i = 0;
\\$i++;
\\$cfg['Servers'][\\$i]['verbose'] = 'vm-rg3';
\\$cfg['Servers'][\\$i]['host'] = '127.0.0.1';
\\$cfg['Servers'][\\$i]['port'] = '';
\\$cfg['Servers'][\\$i]['socket'] = '';
\\$cfg['Servers'][\\$i]['connect_type'] = 'tcp';
\\$cfg['Servers'][\\$i]['auth_type'] = 'config';
\\$cfg['Servers'][\\$i]['user'] = 'root';
\\$cfg['Servers'][\\$i]['password'] = '';
\\$cfg['Servers'][\\$i]['AllowNoPassword'] = true;
\\$cfg['blowfish_secret'] = '5522d129ef83a1.90473684';
\\$cfg['DefaultLang'] = 'en';
\\$cfg['ServerDefault'] = 1;
\\$cfg['UploadDir'] = '';
\\$cfg['SaveDir'] = '';
\\$cfg['CheckConfigurationPermissions'] = false;
\\$cfg['LoginCookieRecall'] = false;
\\$cfg['LoginCookieDeleteAll'] = false;
\\$cfg['UserprefsDeveloperTab'] = true;
\\$cfg['DBG']['sql'] = true;
\\$cfg['NavigationDisplayLogo'] = false;
\\$cfg['UserprefsDisallow'] = array('NavigationDisplayLogo');
EOL

cat  > /etc/nginx/conf.d/phpmyadmin.conf <<EOL

server {
    server_name vm-rg3.phpmyadmin;
    access_log /vagrant/logs/nginx/phpmyadmin_access.log;
    error_log /vagrant/logs/nginx/phpmyadmin_error.log;
    root /var/www/phpmyadmin;

    location / {
        index  index.html index.php;
    }
    
    location ~ \\.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;
    }
}

EOL

echo "127.0.0.1 api.pmt www.pmt pmt acp.pmt acps.pmt fdt www.fdt api.rg api.rg acp.rg www.rg acp.vme www.vme vm-rg3 api.ipspecs acp.ipspecs www.ipspecs" >> /etc/hosts

SHELL
#=end







#=begin setup mailcatcher
  config.vm.provision "shell", inline: <<-SHELL
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "setup mailcatcher"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"

gem install mailcatcher

cat >> /etc/rc.d/rc.local <<EOL
/usr/local/bin/mailcatcher --http-ip 192.168.56.131
EOL

cat >> /usr/local/lib/php.ini <<EOL
sendmail_path = /usr/local/bin/catchmail -f some@from.address
EOL

/usr/local/bin/mailcatcher --http-ip 192.168.56.131

SHELL
#=end






#=begin (re)start services
  config.vm.provision "shell", inline: <<-SHELL
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "setup services auto-start"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"

/usr/sbin/php-fpm
systemctl restart nginx.service
systemctl restart memcached.service
systemctl restart tor.service
systemctl restart rabbitmq-server.service
SHELL
#=end







#=begin setup welcome message
  config.vm.provision "shell", inline: <<-SHELL
cat >> /etc/motd <<EOL

Welcome to VM-RG3! Please contact Max Deshkevich having any questions: 7workers@gmail.com
------------------------------------------
hosts :
192.168.56.131 www.rg api.rg acp.rg acps.rg fdt ipspecs rg botmon api.botmon acp.botmon api.ipspecs acp.ipspecs www.ipspecs vme acp.vme api.vme vm-fdt api.pmt www.pmt pmt acp.pmt acps.pmt

http://vm-rg3.phpmyadmin/             http://vm-rg3:1080/ (mailcatcher)       http://vm-rg3:15672/ (RabbitMQ ACP)

$ tail -n 50 /vagrant/logs/php_error.log
$ sudo su -
$ sudo pkill php-fpm
$ echo 'flush_all' | nc localhost 11211
$ xdebug-start
$ xdebug-stop

EOL
SHELL
#=end






  config.vm.provision "shell", inline: <<-SHELL
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo "All done, now setup individual projects. Please restart VM first: vagrant reload"
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
SHELL
  
























  
  
  
  
end
